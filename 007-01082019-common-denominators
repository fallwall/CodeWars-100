
You will have a list of rationals in the form
 { {numer_1, denom_1} , ... {numer_n, denom_n} } 
or
 [ [numer_1, denom_1] , ... [numer_n, denom_n] ] 
or
 [ (numer_1, denom_1) , ... (numer_n, denom_n) ] 
where all numbers are positive ints.

You have to produce a result in the form
 (N_1, D) ... (N_n, D) 
or
 [ [N_1, D] ... [N_n, D] ] 
or
 [ (N_1', D) , ... (N_n, D) ] 
or
{{N_1, D} ... {N_n, D}} 
or
"(N_1, D) ... (N_n, D)"
depending on the language (See Example tests)

in which D is as small as possible and

 N_1/D == numer_1/denom_1 ... N_n/D == numer_n,/denom_n.
Example:

convertFracs [(1, 2), (1, 3), (1, 4)] `shouldBe` [(6, 12), (4, 12), (3, 12)]
Note:
Due to the fact that first translations were written long ago - more than 4 years - these translations have only irreducible fractions. Newer translations have some reducible fractions. To be on the safe side it is better to do a bit more work by simplifying fractions even if they don't have to be.

Note for Bash:
input is a string, e.g "2,4,2,6,2,8"

output is then "6 12 4 12 3 12"



=============================================================

//best answer

const gcd = (a, b) => b ? gcd(b, a % b) : a;
const lcm = (a, b) => a * b / gcd(a, b);

function convertFrac(arr) {
  const cd = arr.reduce((a, [_, d]) => lcm(d, a), 1);
  return arr.map(([n, d]) => `(${n * cd/d},${cd})`).join('');
}

// 2nd best

function gcd(a,b) {
  return a < b ? gcd(b,a) : b == 0 ? a : gcd(b,a%b);
}

function lcm(a,b) {
  return a * b / gcd(a,b);
}

function convertFrac(lst){
  var denom = lst.reduce(function(p,c) {
    return lcm(p, c[1]);
  }, 1);
  return lst.map(function(v) {
    return "(" + (v[0] * denom / v[1]) + "," + denom + ")";
  }).join("");
}


convertFrac([ [ 69, 130 ], [ 87, 1310 ], [ 3, 4 ] ]) //=> '(18078,34060)(2262,34060)(25545,34060)'
// [ [1, 2], [1, 3], [1, 4] ] // => (6,12)(4,12)(3,12)
