Write a function called that takes a string of parentheses, 
and determines if the order of the parentheses is valid. 
The function should return true if the string is valid, and false if it's invalid.

Examples: 
"()"              =>  true
")(()))"          =>  false
"("               =>  false
"(())((()())())"  =>  true

=======================================================================

My attempt (failed one test):

function validParentheses(parens){
  const arr = parens.split("");
  const open = [];
  const end = [];
  for (let i = 0; i < arr.length; i++ ){
    arr[i] === "(" ?  open.push(arr[i]) : end.push(arr[i]);
  }
  if (open.length !== end.length || arr[0] !== "(" || arr[arr.length-1] !== ")" || arr.length < 2) {return false;
  } else {
    return true;
    }
}

=======================================================================

inspired by:

const validParentheses =(parens)=> {
    let ind = 0;
    for (let i = 0 ; i < parens.length && ind >= 0; i++) {
        ind += (parens[i] === "(") ? 1 : -1;
    }
    return (ind == 0);
};
