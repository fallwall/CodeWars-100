Your task is to write a function that does just what the title suggests 
(so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number n of smallest elements to return.

Also:

the number of elements to be returned cannot be higher than the array/list/vector length;
elements can be duplicated;
in case of duplicates, just return them according to the original order (see third example for more clarity).
Same examples and more in the test cases:

firstNSmallest([1,2,3,4,5],3) === [1,2,3] //well, not technically ===, but you get what I mean
firstNSmallest([5,4,3,2,1],3) === [3,2,1]
firstNSmallest([1,2,3,4,1],3) === [1,2,1]
firstNSmallest([1,2,3,-4,0],3) === [1,-4,0]
firstNSmallest([1,2,3,4,5],0) === []


============================================================================================
My solution: 
function firstNSmallest(array, n){
  return array.map((e,i) => {ind: i, val: e})
              .sort((a,b)=> a.val - b.val)
              .slice(0, n)
              .sort((a,b)=> a.ind - b.ind)
              .map(item=> item.val);
}

failed 4 random test. maybe problem with -/+?

============================================================================================
Improved/Solved:

function firstNSmallest(arr, n) {
  return arr.map((e,i) => ({e,i}))
    .sort((a,b) => a.e - b.e || a.i - b.i)
    .slice(0,n)
    .sort((a,b) => a.i - b.i)
    .map(w => w.e);
}

============================================================================================
function firstNSmallest(array, n){
 while(array.length != n) {
   array.splice(array.lastIndexOf(Math.max(...array)), 1)
   }
   return array
 }
 
 
 ============================================================================================
 function firstNSmallest(array, n){
  return array.map((x,i) => [x,i])
    .sort((a,b) => a[0] !== b[0] ? a[0]-b[0] : a[1]-b[1])
    .slice(0, n)
    .sort((a,b) => a[1]-b[1])
    .map(x => x[0])
}
