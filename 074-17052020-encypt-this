Description:
Encrypt this!

You want to create secret messages which can be deciphered by the Decipher this! kata. Here are the conditions:

Your message is a string containing space separated words.
You need to encrypt each word in the message using the following rules:
The first letter needs to be converted to its ASCII code.
The second letter needs to be switched with the last letter
Keepin' it simple: There are no special characters in input.
Examples:
encryptThis("Hello") === "72olle"
encryptThis("good") === "103doo"
encryptThis("hello world") === "104olle 119drlo"

=============================================================================

my solution:

var encryptThis = function(text) {
  const arr = text.split(" ");
  let res = [];
  for (let i = 0; i< arr.length; i++) {
    if (arr[i].length < 2) {
    res.push(arr[i][0].charCodeAt(0))
    } else if (arr[i].length < 3) {
    res.push(arr[i][0].charCodeAt(0) + arr[i].charAt(1));
    } else {
    res.push(arr[i][0].charCodeAt(0) + arr[i].charAt(arr[i].length-1) + arr[i].substring(2,(arr[i].length-1))+ arr[i].substring(1,2));
    }
  }
  return res.join(" ");
}

=============================================================================

Inspired by:

const encryptThis = text => text
  .split(' ')
  .map(word => word
  .replace(/(^\w)(\w)(\w*)(\w$)/, `$1$4$3$2`)
  .replace(/^\w/, word.charCodeAt(0)))
  .join(' ');
  
const encryptThis = text =>
  text.replace(/\b\w(\w?)(\w*?)(\w?)\b/g, (word, a, mid, b) => 
    word.charCodeAt(0) + b + mid + a);
    
    
 const encryptWord = w => {
  const first = w.charCodeAt(0);
  let res;
  switch (w.length) {
    case 0: return '';
    case 1: return first;
    case 2: res = [first, w[1]]; break;
    case 3: res = [first, w[2], w[1]]; break;
    default: res = [first, w.slice(-1), w.slice(2,-1), w[1]]; break;
  }
  return res.join('');
};

const encryptThis = text => text.split(' ').map(encryptWord).join(' ');
