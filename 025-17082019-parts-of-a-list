Write a function partlist that gives all the ways to divide a list (an array) 
of at least two elements into two non-empty parts.

Each two non empty parts will be in a pair (or an array for languages without tuples or a structin C - C: 
see Examples test Cases - )
Each part will be in a string
Elements of a pair must be in the same order as in the original array.

Example:

a = ["az", "toto", "picaro", "zone", "kiwi"] -->

[["az", "toto picaro zone kiwi"], ["az toto", "picaro zone kiwi"], 
["az toto picaro", "zone kiwi"], ["az toto picaro zone", "kiwi"]]

=====================================================================================

My solution:
function partlist(arr) {
  const result = [];
    for (let i=0; i< arr.length-1; i++) {
    result.push([arr.slice(0, i+1).join(" "), arr.slice(i+1, arr.length).join(" ")]);
    }
  return result;
}
=====================================================================================

Inspired by . (MAP!)

var partlist=a=>a.map((v,i)=>[a.slice(0,i).join(' '),a.slice(i).join(' ')]).slice(1)

function partlist(arr) {
    return arr.map((v, i) => [arr.slice(0, i).join(' '), arr.slice(i).join(' ')]).slice(1)
}
