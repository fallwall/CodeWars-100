The maximum sum subarray problem consists in finding the maximum sum 
of a contiguous subsequence in an array or list of integers:

maxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])
// should be 6: [4, -1, 2, 1]

Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. 
If the list is made up of only negative numbers, return 0 instead.

Empty list is considered to have zero greatest sum. 
Note that the empty list or array is also a valid sublist/subarray.


=====================================================================================
My solution:

const maxSequence =(arr)=>{
const arrSum = arr => arr.reduce((a,b) => a + b, 0)
  let maxSum = 0;
  let maxSumArr = 0;
  for (let i=0; i <= arr.length-1; i++){
    for (let j=1; j<= arr.length; j++) {
      if (arrSum(arr.slice(i,j)) > maxSum) {
        maxSum = arrSum(arr.slice(i,j));
        maxSumArr = arr.slice(i,j);
      }
    }
    }
    return maxSum;
  }
  
  Note:
  array sum: 
  const arrSum = arr => arr.reduce((a,b) => a + b, 0)
  
  array.slice:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
  arr.slice([begin[, end]])
  //second index is which index of element to stop (not included)
  
  I had to look for pattern with example.
  more complicated than necessary. Because I thought I need to find out the exact array not just the answer.
  
  =====================================================================================
  
  
  Inspired by:
  
  var maxSequence = function(arr){
  var min = 0, ans = 0, i, sum = 0;
  for (i = 0; i < arr.length; ++i) {
    sum += arr[i];
    min = Math.min(sum, min);
    ans = Math.max(ans, sum - min);
  }
  return ans;
}
