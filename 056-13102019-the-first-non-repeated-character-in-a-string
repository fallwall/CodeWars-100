You need to write a function, that returns the first non-repeated character in the given string.

For example for string "test" function should return 'e'.
For string "teeter" function should return 'r'.

If a string contains all unique characters, then return just the first character of the string.
Example: for input "trend" function should return 't'

You can assume, that the input string has always non-zero length.

If there is no repeating character, return null in JS or Java, and None in Python.

==============================================================================================
My solution:

function firstNonRepeated(s) {
  const result = [];
  for (let i = 0; i< s.length ; i++) {
    if (s.indexOf(s.charAt(i), i+1) === -1 && s.indexOf(s.charAt(i)) === i) {
      result.push(s.charAt(i));
    }
  }
  return result.length > 0 ? result[0] : null;
}



==============================================================================================
can be simplified with lastindexof:

function firstNonRepeated(s) {
  for(var i = 0; i < s.length; i++) {
    if (s.indexOf(s[i]) === s.lastIndexOf(s[i])) {
      return s[i]
    }
  }
  return null
}

function firstNonRepeated(s) {
  const r = [...s].find((x, i) => s.lastIndexOf(x) === s.indexOf(x));
  return typeof r === 'undefined' ? null : r;
}

const firstNonRepeated = s => [...s].filter((x) => s.split(x).length == 2)[0] || null
