Given a two-dimensional array of integers, return the flattened version of the array with all the integers in the sorted (ascending) order.

Example:

Given [[3, 2, 1], [4, 6, 5], [], [9, 7, 8]], your function should return [1, 2, 3, 4, 5, 6, 7, 8, 9].

Addendum:

Please, keep in mind, that JavaScript is by default sorting objects alphabetically. For more information, please consult:

http://stackoverflow.com/questions/6093874/why-doesnt-the-sort-function-of-javascript-work-well

============================================================================
My solution:

function flattenAndSort(array) {
  const answer = [];
  array.forEach(a => a.forEach(b => answer.push(b)));
  return answer.sort((c, d) => c - d);
}

============================================================================
Inspisre by:

function flattenAndSort(array) {
  return [].concat(...array).sort((a,b) => a - b);
}


function flattenAndSort(array) {
  return array
    .reduce((result, current) => [...result, ...current],[])
    .sort((a, b) => a - b)
    ;
}

const flattenAndSort = a => Array.prototype.concat(...a).sort((x, y) => x - y);
