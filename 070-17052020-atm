There is enough money available on ATM in nominal value 10, 20, 50, 100, 200 and 500 dollars.

You are given money in nominal value of n with 1<=n<=1500.

Try to find minimal number of notes that must be used to repay in dollars, or output -1 if it is impossible.


=======================================================================================

My solution:

function solve(n) {
  const FiveHundred = Math.floor(n /500);
  const TwoHundred = Math.floor((n - FiveHundred * 500)/200);
  const Hundred = Math.floor((n - FiveHundred * 500 - TwoHundred * 200)/100);
  const Fifty = Math.floor((n - FiveHundred * 500 - TwoHundred * 200 - Hundred * 100)/50);
  const Twenty = Math.floor((n - FiveHundred * 500 - TwoHundred * 200 - Hundred * 100 - Fifty * 50)/20);
  const Ten = Math.floor((n - FiveHundred * 500 - TwoHundred * 200 - Hundred * 100 - Fifty * 50 - Twenty * 20)/10)
  return ((FiveHundred * 500 + TwoHundred * 200 + Hundred * 100 + Fifty * 50 + Twenty * 20 + Ten * 10) == n && n > 9) ? (FiveHundred + TwoHundred + Hundred + Fifty + Twenty + Ten):-1;
}

=======================================================================================

Inspired by:

function solve(n) {
  if (n % 10) return -1
  return [500, 200, 100, 50, 20, 10].reduce((s, v) => {
    let ans = n / v | 0
    n %= v
    return s + ans
  }, 0)
}


=======================================================================================

function solve(n) {
  if(n % 10 !== 0) return -1;
  let count = 0;
  while(n >= 500) { n -= 500; count += 1}
  while(n >= 200) { n -= 200; count += 1}
  while(n >= 100) { n -= 100; count += 1}
  while(n >= 50) { n -= 50; count += 1}
  while(n >= 20) { n -= 20; count += 1}
  while(n >= 10) { n -= 10; count += 1}
  return count;
}

=======================================================================================

function solve(n) {
  let counter = 0;
  [500, 200, 100, 50, 20, 10].forEach(item => {
    counter += Math.floor(n / item)
    n = n % item
  })
  return n ? -1 : counter
}
