
Task
You will receive an array as parameter that contains 1 or more integers and a number n.

Here is a little visualization of the process:

Step 1: Split the array in two:

{1, 2, 5, 7, 2, 3, 5, 7, 8}
      /            \
{1, 2, 5, 7}    {2, 3, 5, 7, 8}
Step 2: Put the arrays on top of each other:

   {1, 2, 5, 7}
{2, 3, 5, 7, 8}
Step 3: Add them together:

{2, 4, 7, 12, 15}
Repeat the above steps n times or until there is only one number left, and then return the array.

Example
Input: {4, 2, 5, 3, 2, 5, 7}, n=2


Round 1
-------
step 1: {4, 2, 5}  {3, 2, 5, 7}

step 2:    {4, 2, 5}
        {3, 2, 5, 7}

step 3: {3, 6, 7, 12}


Round 2
-------
step 1: {3, 6}  {7, 12}

step 2:  {3,  6}
         {7, 12} 

step 3: {10, 18}


Result: {10, 18}


================================================================================

My solution:

function splitAndAdd(arr, n) {
  let counter = 0;
   while (arr.length > 1 && counter < n){
      counter ++;
      arr = consolidate(arr);
    } 
  return arr;
}

const consolidate=(arr)=> {
  const first = Math.floor(arr.length/2);
  const last = Math.ceil(arr.length/2);
  let firstArr = arr.slice(0, first)
  let lastArr = arr.slice(first);
  if (first < last) {
    firstArr.unshift(0);
  }
  const result = firstArr.map((a,i)=> a+lastArr[i]);
  return result;
}



================================================================================

Inspiration:

function splitAndAdd(arr, n) {
  if(arr.length<2||n<1)return arr; --n;
  var hlf=Math.floor(arr.length/2),
      lf =arr.slice(0,hlf),
      rt =arr.slice(hlf),
      tmp=[];
  while(lf.length){tmp.unshift(lf.pop()+rt.pop())}
  if(rt.length)tmp.unshift(rt.pop());
  return splitAndAdd(tmp,n);
}


================================================================================

function splitAndAdd(arr, n) {
  if (!n || arr.length === 1) return arr;
  let arrA = arr.slice(0, arr.length/2);
  let arrB = arr.slice(arrA.length);
  if (arr.length % 2) arrA.unshift(0);
  let retArr = arrA.map((x, i) => x + arrB[i]);
  return splitAndAdd(retArr, n - 1);
}

================================================================================
function splitAndAdd(arr, n) {

  arr.reverse();
  
  while (n>0 && arr.length>1){
    let m = Math.ceil(arr.length/2);
    let left = arr.slice(0, m);
    let right = arr.slice(m);
    
    arr = left.map((e, i)=> e + (right[i] || 0));
    --n
  }
  
  return arr.reverse();
}

================================================================================

function splitAndAdd(arr, n) {
  while (n && arr.length > 1) {
    n--;
    let l = arr.length,
        a = arr.slice(0, l / 2),
        b = arr.slice(l / 2);
    if (l % 2) a.unshift(0);
    arr = a.map((e, i) => e + b[i]);
  }
  return arr;
}
